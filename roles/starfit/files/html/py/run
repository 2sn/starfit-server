#!/usr/bin/env python
print("Content-Type: text/html; charset=UTF-8\n")

import cgi
import cgitb
import os
import time
from uuid import uuid4

from redis import Redis
from rq import Queue

cgitb.enable()

from job import render, run_job
from utils import Config

forms = cgi.FieldStorage()  # Retrieve form fields
config = Config(forms)  # Validate form fields and generate config
ip = os.environ["REMOTE_ADDR"]

if len(config.errors) > 0:
    # Render the error page
    page = render(config=config, result=None, img_tags=[], doc="webpage")
else:
    # Start job in background
    description = f"""
        StarFit job from: {ip}
        (email: {str(config.email) if config.mail else 'None'},
        ETA: {config.time_eta})
        """
    q = Queue(connection=Redis(), default_timeout=3600)
    j = q.enqueue_call(
        run_job,
        args=(config,),
        result_ttl=600,
        ttl=600,
        failure_ttl=600,
        description=description,
        job_id=f"{config.start_time}__{str(uuid4())}",
    )
    if not config.mail:  # Wait for job to complete if not sending an email
        while j.get_status() in ("queued", "started", "scheduled", "deferred"):
            time.sleep(1)
        if j.get_status() == "finished":
            page = j.result
        else:  # TODO: convert into a user friendly error
            print(j.get_status(), j.exc_info)
            raise RuntimeError(j.exc_info)
    else:  # Render the 'sending email' page
        page = render(config=config, result=None, img_tags=[], doc="webpage")

# Display page
print(page)
