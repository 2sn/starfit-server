#!/usr/bin/env python
print("Content-Type: text/html; charset=UTF-8\n")

import cgi
import cgitb
import os
import time
from uuid import uuid4

from redis import Redis
from rq import Queue

cgitb.enable()

from job import render, run_job
from utils import Config

forms = cgi.FieldStorage()  # Retrieve form fields
config = Config(forms)  # Validate form fields and generate config
ip = os.environ["REMOTE_ADDR"]

if len(config.errors) > 0:
    # Render the configerror page
    page = render(config=config, result=None, img_tags=[], doc="configerror")
else:
    description = f"""
        StarFit job from: {ip}
        (email: {str(config.email) if config.mail else 'None'},
        ETA: {config.time_eta})
        """
    q = Queue("default", connection=Redis(), default_timeout=86400)
    j = q.enqueue_call(
        run_job,
        args=(config,),
        result_ttl=600,
        failure_ttl=600,
        description=description,
        job_id=f"{config.start_time}__{str(uuid4())}",
    )

    # Wait for tmax seconds
    tmax = 15
    tstart = time.time()
    while time.time() - tstart < tmax:
        time.sleep(1)
        jobstat = j.get_status()
        if jobstat not in ("queued", "started", "scheduled", "deferred"):
            break

    j.refresh()

    jobinfo = dict(status=jobstat, exc_info=j.exc_info)

    if jobstat == "finished":
        page = j.result
    elif jobstat in ("stopped", "canceled", "failed"):
        page = render(
            config=config, result=None, img_tags=[], doc="jobfail", jobinfo=jobinfo
        )
    else:
        if not config.mail:
            j.cancel()
        page = render(config=config, result=None, img_tags=[], doc="sendmail")

# Display page
print(page)
