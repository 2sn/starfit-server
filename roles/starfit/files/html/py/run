#!/usr/bin/env python
print("Content-Type: text/html; charset=UTF-8\n")

import cgi
import cgitb

cgitb.enable()

import os
import smtplib
import sys
from datetime import datetime
from email import encoders as Encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from socket import gethostname

import starfit
from error_check import check
from human import method2human
from img_utils import convert_img_to_b64_tag
from plot import make_plots
from render import render
from starfit.autils.isotope import Ion
from starfit.autils.time2human import time2human

start_time = datetime.now().strftime("%Y-%M-%d-%H-%M-%S")

# Initialise render vars
error = ""
mail = False
email = ""
time_eta = ""
result = None
z_max = ""
exc_string = ""
lol_string = ""
method_string = ""
img_tags = []

# Retrieve form fields
form = cgi.FieldStorage()  # Get POST data

try:
    stardata = form["stardata"]
except:
    sys.exit()

email = str(form.getfirst("email"))
algorithm = str(form.getfirst("algorithm"))
sol_size = int(form.getfirst("sol_size"))
z_max = int(form.getfirst("z_max"))
comb = int(form.getfirst("combine"))
pop_size = int(form.getfirst("pop_size"))
time_limit = int(form.getfirst("time_limit"))
dbname = str(form.getfirst("database"))
fixed = int(form.getfirst("fixed"))
plotformat = str(form.getfirst("plotformat"))
perfplot = form.getlist("perfplot")
z_exclude_str = str(form.getfirst("z_exclude"))
z_lolim_str = str(form.getfirst("z_lolim"))
cdf = bool(form.getfirst("cdf"))

z_exclude = [z for z in [Ion(i).Z for i in z_exclude_str.split(",")] if z != 0]
z_lolim = [z for z in [Ion(i).Z for i in z_lolim_str.split(",")] if z != 0]

if comb == 1:
    combine = [[6, 7]]
elif comb == 2:
    combine = [[6, 7, 8]]
else:
    combine = [[]]

if perfplot == []:
    perfplot = 0

if email != "":
    forcemail = 1
else:
    forcemail = 0

# Save files to tmp
if stardata.filename:
    filename = os.path.join("/tmp", stardata.filename + start_time)
    with open(filename, "wb") as fstar:
        fstar.write(stardata.file.read())
else:
    filename = os.path.join(starfit.DATA_DIR, "stars", "HE1327-2326.dat")

dbpath = os.path.join(starfit.DATA_DIR, "db", dbname)

if (forcemail) or (time_limit > 60) or (plotformat in ["pdf", "eps", "ps"]):
if len(error) == 0:
    # Manually assign time_limit
if algorithm == "double":
    time_limit = 60 * 15
elif algorithm == "single":
    time_limit = 0

    if mail:
        time_eta = time2human(time_limit) if (time_limit < 600) else "the future..."

    if algorithm == "ga":
        # Run the fitting algorithm
    result = starfit.Ga(
        filename=filename,
        db=dbpath,
        time_limit=time_limit,
        pop_size=pop_size,
        sol_size=sol_size,
        local_search=True,
        z_max=z_max,
        z_exclude=z_exclude,
        z_lolim=z_lolim,
        combine=combine,
        fixed_offsets=fixed,
        cdf=cdf,
    )
elif algorithm == "double":
    sol_size = 2
    result = starfit.Double(
        filename=filename,
        db=dbpath,
        silent=True,
        n_top=1000,
        combine=combine,
        fixed=fixed,
        save=True,
        webfile=start_time,
        cdf=cdf,
    )
elif algorithm == "single":
    sol_size = 1
    result = starfit.Single(
        filename=filename,
        db=dbpath,
        silent=True,
        combine=combine,
        z_max=z_max,
        z_exclude=z_exclude,
        z_lolim=z_lolim,
        cdf=cdf,
    )
else:
    raise RuntimeError('Bad choice of "algorithm"')

imgfiles = make_plots(result, algorithm, perfplot, plotformat, start_time)

db = result.db

exc_string = ", ".join([Ion(x).element_symbol() for x in z_exclude])
lol_string = ", ".join([Ion(x).element_symbol() for x in z_lolim])

if exc_string == "":
    exc_string = "None"
if lol_string == "":
    lol_string = "None"

method_string = method2human(
    algorithm,
    sol_size,
    z_max,
    comb,
    pop_size,
    time_limit,
    dbname,
    fixed,
    cdf,
)

    if not mail:
        img_tags = [convert_img_to_b64_tag(f, plotformat) for f in imgfiles]

page, body = render(
    result,
    z_max,
    exc_string,
    lol_string,
    method_string,
    img_tags,
    mail,
    time_eta,
    error,
)

print(page)

if len(error) > 0:
    sys.exit()

if mail:
    session = smtplib.SMTP(gethostname())
    sender = f"results@{gethostname()}"

    msg = MIMEMultipart()
    msg["From"] = sender
    msg["To"] = email
    msg["Subject"] = "StarFit Results"

    msg.attach(MIMEText(body, "html"))

    # Attach images
    for i, img in enumerate(imgfiles):
        part = MIMEBase("application", "octet-stream")
        part.set_payload(img.getvalue())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            f'attachment; filename="plot{i}.{plotformat}"',
        )
        msg.attach(part)

    # Attach big numbers
    if algorithm == "double":
        part = MIMEBase("application", "octet-stream")
        part.set_payload(open(os.path.join("/tmp", start_time), "rb").read())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            f'attachment; filename="{start_time}.txt"',
        )
        msg.attach(part)

    # Attach plot data
    part = MIMEBase("application", "octet-stream")
    part.set_payload(open(os.path.join("/tmp", "plotdata" + start_time), "rb").read())
    Encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        f'attachment; filename="plotdata_{stardata.filename}_{start_time}.txt"',
    )
    msg.attach(part)

    # Attach input data
    if stardata.filename:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(open(filename, "rb").read())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            f'attachment; filename="{stardata.filename}"',
        )
        msg.attach(part)

    # Send!
    session.sendmail(sender, email, msg.as_string())
