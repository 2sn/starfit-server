#!/usr/bin/env python

import cgi
import cgitb
import os
import sys
from contextlib import nullcontext

from error_check import check

cgitb.enable()
import matplotlib as mpl

mpl.use("Agg")
mpl.rc("text", usetex=True)

import base64
import smtplib
from datetime import datetime
from email import encoders as Encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from io import BytesIO
from socket import gethostname

import jinja2 as j2
import starfit
from starfit.autils.isotope import Ion
from starfit.autils.time2human import time2human

global filename, dbname, sol_size, pop_size, email, mail, plotformat

# Initialise render vars
error = ""
mail = False
email = ""
time_eta = ""
result = None
z_max = ""
exc_string = ""
lol_string = ""
method_string = ""
img_tags = []

env = j2.Environment(
    loader=j2.FileSystemLoader("templates"), autoescape=j2.select_autoescape()
)
template = env.get_template("page.html.jinja")
template_email = env.get_template("email.html.jinja")


def method2human(
    algorithm,
    sol_size,
    z_max,
    comb,
    pop_size,
    time_limit,
    dbname,
    fixed,
    cdf,
):
    algorithm2h = "Method: "
    if algorithm == "ga":
        algorithm2h += "Genetic Algorithm"
    elif algorithm == "single":
        algorithm2h += "Complete single star search"
    elif algorithm == "double":
        algorithm2h += "Complete double star search"

    z_max2h = "Z max: " + str(z_max)

    combine2h = "Combined elements: "
    if comb == 0:
        combine2h += "None"
    if comb == 1:
        combine2h += "C+N"
    if comb == 2:
        combine2h += "C+N+O"

    dbname2h = "Model database: " + dbname

    if fixed:
        fixed2h = "Fixed offsets"
    else:
        fixed2h = "Free offsets"

    if cdf:
        cdf2h = "CDF upper limits"
    else:
        cdf2h = "Simple upper limits"

    if algorithm == "ga":
        pop_size2h = "Population size: " + str(pop_size)
        time_limit2h = "Time limit: " + str(time_limit)
        sol_size2h = "Gene size: " + str(sol_size)
        out = "<br />".join(
            (
                algorithm2h,
                sol_size2h,
                z_max2h,
                combine2h,
                pop_size2h,
                time_limit2h,
                dbname2h,
                fixed2h,
                cdf2h,
            )
        )
    else:
        out = "<br />".join((algorithm2h, z_max2h, combine2h, dbname2h, fixed2h, cdf2h))

    return out


# Retrieve form fields
form = cgi.FieldStorage()  # Get POST data

try:
    stardata = form["stardata"]
except:
    sys.exit()

# filename  = str(form.getfirst("filename"))
email = str(form.getfirst("email"))
algorithm = str(form.getfirst("algorithm"))
sol_size = int(form.getfirst("sol_size"))
z_max = int(form.getfirst("z_max"))
comb = int(form.getfirst("combine"))
pop_size = int(form.getfirst("pop_size"))
time_limit = int(form.getfirst("time_limit"))
dbname = str(form.getfirst("database"))
fixed = int(form.getfirst("fixed"))
plotformat = str(form.getfirst("plotformat"))
perfplot = form.getlist("perfplot")
z_exclude_str = str(form.getfirst("z_exclude"))
z_lolim_str = str(form.getfirst("z_lolim"))
cdf = bool(form.getfirst("cdf"))

z_exclude = [z for z in [Ion(i).Z for i in z_exclude_str.split(",")] if z != 0]
z_lolim = [z for z in [Ion(i).Z for i in z_lolim_str.split(",")] if z != 0]

if comb == 1:
    combine = [[6, 7]]
elif comb == 2:
    combine = [[6, 7, 8]]
else:
    combine = [[]]

if perfplot == []:
    perfplot = 0

if email != "":
    forcemail = 1
else:
    forcemail = 0

start_time = datetime.now().strftime("%Y-%M-%d-%H-%M-%S")

# Save files to tmp
if stardata.filename:
    filename = os.path.join("/tmp", stardata.filename + start_time)
    with open(filename, "wb") as fstar:
        fstar.write(stardata.file.read())
else:
    filename = os.path.join(starfit.DATA_DIR, "stars", "HE1327-2326.dat")

dbpath = os.path.join(starfit.DATA_DIR, "db", dbname)

if (forcemail) or (time_limit > 60) or (plotformat in ["pdf", "eps", "ps"]):
    mail = True
else:
    mail = False

error = check(filename, dbpath, sol_size, pop_size, plotformat, mail, email)
if error != []:
    print(template.render(vars()))
    sys.exit()

# Manually assign time_limit
if algorithm == "double":
    time_limit = 60 * 15
elif algorithm == "single":
    time_limit = 0

if mail:
    time_eta = time2human(time_limit) if (time_limit < 600) else "the future..."
    print(template.render(vars()))
    sys.stdout.flush()  # Flush output before forking process

# with daemon.DaemonContext() if mail else nullcontext():
with nullcontext():

    if algorithm == "ga":
        # Run the fitting algorithm
        result = starfit.Ga(
            filename=filename,
            db=dbpath,
            time_limit=time_limit,
            pop_size=pop_size,
            sol_size=sol_size,
            local_search=True,
            z_max=z_max,
            z_exclude=z_exclude,
            z_lolim=z_lolim,
            combine=combine,
            fixed_offsets=fixed,
            cdf=cdf,
        )
    elif algorithm == "double":
        sol_size = 2
        result = starfit.Double(
            filename=filename,
            db=dbpath,
            silent=True,
            n_top=1000,
            combine=combine,
            fixed=fixed,
            save=True,
            webfile=start_time,
            cdf=cdf,
        )
    elif algorithm == "single":
        sol_size = 1
        result = starfit.Single(
            filename=filename,
            db=dbpath,
            silent=True,
            combine=combine,
            z_max=z_max,
            z_exclude=z_exclude,
            z_lolim=z_lolim,
            cdf=cdf,
        )
    else:
        raise RuntimeError('Bad choice of "algorithm"')

# Make plots
imgfiles = []
plots = []
if algorithm in ["single", "double"]:
    plotrange = [0]
elif perfplot:
    plotrange = [0, 1]
else:
    plotrange = [0]
for i in plotrange:
    result.plot(i + 1)
    imgfile = BytesIO()

    # BUG
    mpl.pyplot.savefig(imgfile, format=plotformat)

    imgfiles += [imgfile]
    imgdata = imgfile.getvalue()
    plots += [str(base64.b64encode(imgdata))[2:-1]]

db = result.db

plotdatafile = os.path.join("/tmp", "plotdata" + start_time)
with open(plotdatafile, mode="w") as f:
    f.write("Z      log(X/X_sun)\n")
    for z, abu in zip(result.plotdata[0], result.plotdata[1]):
        f.write("{:<2}     {:7.5f}\n".format(z, abu))

exc_string = ", ".join([Ion(x).element_symbol() for x in z_exclude])
lol_string = ", ".join([Ion(x).element_symbol() for x in z_lolim])

if exc_string == "":
    exc_string = "None"
if lol_string == "":
    lol_string = "None"

method_string = method2human(
    algorithm,
    sol_size,
    z_max,
    comb,
    pop_size,
    time_limit,
    dbname,
    fixed,
    cdf,
)

if not mail:
    for plot in plots:
        if plotformat == "svg":
            typestr = plotformat + "+xml"
        else:
            typestr = plotformat
        img_tag = '<object data="data:image/{typestr};base64,{data}" type="image/{typestr}" width="700"></object>'.format(
            typestr=typestr,
            data=plot,
        )
        img_tags += [img_tag]
    print(template.render(vars()))

else:
    body = template_email.render(vars())
    session = smtplib.SMTP(gethostname())
    sender = "results@{:s}".format(gethostname())

    msg = MIMEMultipart()
    msg["From"] = sender
    msg["To"] = email
    msg["Subject"] = "StarFit Results"

    msg.attach(MIMEText(body, "html"))

    # Attach images
    for i in plotrange:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(imgfiles[i].getvalue())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            'attachment; filename="{:s}"'.format("plot" + str(i) + "." + plotformat),
        )
        msg.attach(part)

    # Attach big numbers
    if algorithm == "double":
        part = MIMEBase("application", "octet-stream")
        part.set_payload(open(os.path.join("/tmp", start_time), "rb").read())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            'attachment; filename="{:s}"'.format(start_time + ".txt"),
        )
        msg.attach(part)

    # Attach plot data
    part = MIMEBase("application", "octet-stream")
    part.set_payload(open(os.path.join("/tmp", "plotdata" + start_time), "rb").read())
    Encoders.encode_base64(part)
    part.add_header(
        "Content-Disposition",
        'attachment; filename="{:s}"'.format(
            "plotdata_" + stardata.filename + "_" + start_time + ".txt"
        ),
    )
    msg.attach(part)

    # Attach input data
    if stardata.filename:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(open(filename, "rb").read())
        Encoders.encode_base64(part)
        part.add_header(
            "Content-Disposition",
            'attachment; filename="{:s}"'.format(stardata.filename),
        )
        msg.attach(part)

    # Send!
    session.sendmail(sender, email, msg.as_string())
